#container {
    display: grid;
    grid-template-columns: repeat(2,1fr);
    grid-template-rows: repeat(2,1fr);
}
#big {
    grid-column: 1/2;
    grid-row: 1/2;
    align-self: self-end;
    justify-self: self-end;
}
#small {
    grid-column: 2/3;
    grid-row: 2/3;
    align-self: self-start;
    justify-self: self-start;
}


top / bottom / left / right -> non - static position 

<div C >
    <div A >
        <div B >
    </div>
</div>  

B -> posn : absolute , top: 10px, left: 10px;

A -> posn: absolute, 

C -> posn: relative 



stacking context
z-index: 200


<div parent : 5 > 100 x 100 - position absolute / fixed 
    <div child ; 100>
</div>

<div parent2: 2 > 50 x 50 
    <div child2 : 200
</div>

// Question

z-index : stacking context;

// ans: 200
<div z-index: 100>
    <div z-index: 5>
    <div z-index: 300>
</div>

<div z-index: 200; position: relative>



-----------------------------------------
Dan Ambramov 
----------------------------------------

1. requestAnimationFrame 
2. requestIdleCallback - web performance 




-------
useEffect(async () => {}, [])

1. useState, useEffect => polyfill 
2. Why does useEffect not take async function as argument? ->
3. prefetch vs preconnect vs preload -> web performance related -> Pros and cons ->

-------------------------------

<Link to="/abc" />

<link preload type=javascript href="abc.js">

loadtest -> npm package 


// NOT RECOMMENDED 
useEffect(async () => {
    if(count) {
        setCount(....)
    }
},[count])


// stale closures 
cnt = 1

setCount(cnt => cnt + 1) 2
setCount(cnt => cnt + 1) 3
setCount(cnt + 1) 4
setCount(cnt + 1) 5




if(count < 4) {
    setCount(count + 1);
}

return (
    
) 
<input onChange={(e) => setCount(e.target.)} value={count} />  // Controlled component architecture 

<input onChange={(e) => countRef.current = e.target.value } /> // Uncontrolled component


card -> parent (data) (updateCard) -> edit form formObject 



1. Diff between 
    const [count, setCount] = useState(0);
    const [count, setCount] = useState(() => 0);

2. Diff between 
    setCount(count + 1);

    setCount((count) => count + 1); // when to use? 


3. 
    useEffect(() => {
        if(count) {
            setCount(....)
        }
    },[count, setCount]) // why is this required? And when can we skip it? 
    // Exhaustive dependency 

    VS. 

    useEffect(() => {
        if(count) {
            setCount(....)
        }
    },[count]) 

ES Lint Extension

